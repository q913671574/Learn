免费VPN：
 Windscribe			每月10G
  Hotspot Shield	每天500M
  hide.me			每月10G

图片：
	pixabay
	unsplash
	pexels
	CC零图片网
	logo神器
	iconfont
视频：
	Videezy
	videvo
    
	mixkit
音频：
	耳聆网
	淘声网
字体：
	字由
	100font//全免费





1. 字符串可直接拼接
2. 字符串*数字n，将此字符串打印n次
3. temp = input() 将收到的数据直接赋值给temp(从外部接收的数据一般先检验数据类型或强制转换)
4. num = int(temp)将temp转化为int类型，然后赋值给num
5. 使用变量前要先赋值
6. 变量名不能以数字开头
7. 字符串要放在单引号或双引号内（否则会误以为是变量）
8. 转意字符  \  , \%
9. str = r‘C:\now’  字符串前加r将直接显示字符串中的内容，多用于字符串中含有需转移的字符时
10. “”“   ”“” 三重引号字符串，用于显示跨越多行的长字符串
11. random.randint(1,10)   生成一个随机整型，需要引入random：import random
	print( random.choice('tomorrow') )   # 从序列中随机选取一个元素
	print( random.randrange(1,100,2) )   # 生成从1到100的间隔为2的随机整数
	print( random.random() )             # 产生 0 到 1 之间的随机浮点数
	print( random.uniform(1.1,5.4) )     # 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数
12. isinstance(a,str) 判断a是否为str类型，若是则返回true，否则返回false。(也就是判断a是否为str的实例)
13. Python中/是精确除法，//是取整除法
14.  3 ** 2， 表示3的2次方， ** 幂运算符号 -3 ** 2 = -9，3 ** -2 = 0.111111111。**比右侧优先级低，比左侧优先级高；及-3的负号 在** 之后计算
15. 在Python中elif: 等于 c 语言中的 else if()
16. 三元操作符
	x, y = 4, 5
	if x < y:
		small = x
	else:
		small = y
	相当于：
	small = x if x < y else y
17. 断言assert a > b	当条件为真时，自动跳过，当条件为假时，抛出AssertionError的异常
18. for 语法:
	for i in range(x,n)   i 从x递增至n

19. len()返回字符串长度
20. range([start,] stop [,step=1])生成一个从start开始到stop结束(不包括stop这个数)的间隔为step的数字数列。start默认为0，step默认为1

----------------------------LIST----------------------------
21. list.append()只能添加一个数据，
    list.extend([])只能添加一个列表(列表中可以包括很多项)。PS:只能添加在列表最后
22. list.insert(a,b)a 是需要插入的位置(下标从0开始)，b是需要插入的数据(该数据可以是单独一项，也可以是列表)
23. list.remove()输入需要删除的数据的具体名称
	list.reverse()将列表数据翻转无返回值(翻转后数据覆盖原数据)
24. del list[]可以删除指定位置的数据
25. list.pop()删除指定位置的数据，并且本语句的返回值为这个数据。默认删除最后一个数据
26. list[1:3]将第一个到第三个列表中的数据取出来(包括1数据，但不包括3数据)，原列表数据不变。省略1则默认从列表中第一个数据开始
27. ‘小甲鱼’ in(not in) list	返回true或false。用来判断某一项是否在列表中，若存在嵌套列表，需要指定到该数据所在的嵌套列表。
28. list.count('小甲鱼')，将返回'小甲鱼'出现的次数
29. list.index('小甲鱼'， a, b)，返回第a开始到b结束的范围内第一个'小甲鱼'出现的的位置
30. list.reverse()将列表中的数据翻转(最后一个数据变第一个数据)
31. list.sort()不加参数则将列表中数据从小到大排序，加入reverse=True，则从大到小排序。 sorted(list),临时排序，不改变list的数据顺序
32. 列表标志性符号是中括号[], 集合是大括号{}， 元组是小括号(), 字典是{'': x, '': y}
33. 8 * (8) = 64; 8 * (8,)  = (8, 8, 8, 8, 8, 8, 8, 8)
34. str.join('12345') 结果为：'1str2str3str4str5'。 用str将12345分隔开
35. list(b) 把可迭代对象转化为一个列表
如：b = ('I love Fish')
	list(b)
	b = ['I', ' ', 'l', 'o', 'v', 'e', ' ', 'F', 'i', 's', 'h']
36. tuple(b) 与list(b)类似。将可迭代对象转化为一个元组
-------------------------------------------------------------

37. max(b) 返回b中最大的值(b可以是字符串、列表、元组)，若是字母或符号，则比较ASCII码。但是数据类型需一致，不能即包括数字，又包括字母
	min(b) 与max同理
38. sum(b) 将b中数据相加。无法作用于字符串。
39. enumerate(b) b可以是元组、列表。将b中元素一一列举出来即枚举。
40. zip
41. def Function(name1, name2):  定义一个函数并返回某参数
		....
		return (name1 + name2)
42. help(function) 查看某函数的说明文档
43. (name2='第二位置参数', name1='第一位置参数') 关键字参数：在输入实参时，指定实参与形参的对应关系，
44. 默认参数： def Function(name1='小甲鱼', name2='')
45. (*params) 可传入多个参数，将多个参打包成一个元组，通过params[]来调用
46. global params  此操作之后，才可在函数内部修改全局变量params
47. 内部函数需要访问外部函数的参数时，可以将外部函数定义为元组类型。或用 nonlocal params,将参数定义为非内部参数
48. def add(x, y):
		return x + y
	
	lambda x, y: x + y    
    add = lambda x, y: x + y    (冒号前面的是参数，冒号后面的是返回值-返回表达式计算过后的值)    add可以认为是函数名，直接调用即可。
    print(add(3, 5)
49. filter() 过滤器函数。第一个参数为筛选规则，第二个为列表等数据
50. map() 映射函数。第一个参数为映射规则，第二个为列表等数据或产生数据的式子
51. print('%d 阶乘是：%d ' % ( count , factorical(count))) 多个格式化参数需要放在同一括号内

--------------------------dict-------------------------------
52. dict 字典类型：dict = {'李宁':'一皆有可能'， '耐克':'Just do it'}
	print(dict['李宁'])
	dict['爱迪生'] = '天才等于99%的汗水加1%的天分'    通过此方法修改或添加元素(注意索引关键字不能出错)
	for eachkey in dict.keys():										
		print(eachkeys)				打印dict的每一个键值				
	同理可作用于 for value in dict.values()。	dict的每一个数值				
	同理for key, value in dict.items():				dict1的每一项
	for each in dict:  each为取出的dict中的每个键
53. dict.get('李宁') 如果无'李宁'这个键值，也不会报错，会打印None
54. '李宁' in dict  若'李宁'在dict中，则返回True，否则返回False
55. dict.clear() 清除dict中的内容(从堆栈、内存中清除)
56. dict2 = dict1.copy() 复制dict1，并命名为dict2.(与列表、元组一样，若直接赋值，则两者都指向同一地址。同一块蛋糕的不同名字)
57. dict.pop('李宁') 返回键值李宁对应的数据，同时将次键值及数据从dict中清除 
58. dict.popitem() 从dict中随机弹出一项，并将其从dict中清除
59. dict1.dict2('李宁')  用dict2中'李宁'对应的数据，更新(替换)dict1中的数据
---------------------------------------------------------------
60. 集合:set,用花括号定义(无对应关系，只是用','隔开)。set中无重复数据，相同的数只记一个，其他的清除。set是无序的，不能索引
    a.intersection(b)   a与b的交集，a，b均为集合
    a.difference(b)     a与b的差集
61. set1 = set([1,2,3,4,5,5]) 也可以用此方法通过赋值得到
62. divmod(a,b), 用a除以b,并返回两个数，第一个是商第二个是余数
63. try语句，异常检测
	try:
		检测范围
	except Exception as e:
		print(e.reason)
		出现异常(Exception)后的处理代码	try语句中遇到异常则停止后续代码的运行
	finally:
		无论如何都会执行的语句
64. else语句
65. with语句  with open('E:\\learn\\python学习程序\\data.txt') as file: 当file使用完毕后，自动调用.close()方法
66. 类名以大写字母开头，变量以小写字母开头。类-->实例化，就是对象如：t1 = Turtle() Turtle  是一个类，t1是一个对象，是Turtle的实例化。也可直接 Turtlr()
67. 继承：
	class MyList(list):		子类可以继承多个父类
	pass
	子类继承父类的所有方法和属性，另外还拥有一些自己独有的方法，MyList()实例化的对象拥有list的所有方法
68. 方法名字一样时，各个类调用自己的方法
69. super().__init__()继承父类的方法
70. issubclass(B,A) 若B继承于A，则返回True，否则返回False
71. isinstance(b,B) 若b是B的实例或其子类的实例，则返回True，否则返回False
72. hasattr(c1, 'x') 检测c1是否有x属性。x必须加引号，否则会报错
73. getattr(c1, 'y', '不存在') 得到c1的y属性值，若不存在y属性，则返回第三个参数即例子中的'不存在'。若第三个参数省略，则抛出异常。
74. setattr(c1, 'y', 'FishC')  设置c1的y属性值为'FishC'
75. delattr(c1, 'y') 删除c1的y属性，若y属性不存在，则抛出异常，
76. x = property(getSize, setSize, delSize) 将三个方法整合在一起赋值给x，只需对x操作，即可使用这三个方法
77. __str__(self) 当用print输出对象时，就会调用这个方法中return的数据  如 print(uu)		调用__str__(self)
78. __repr__(self) 当直接调用对象时，就会调用这个方法中return的数据	   如 uu			调用__repr__(self)
79. 描述符：使某种特殊类型的实例 成为另一个类的属性，只能定义为类的属性，属于类，不属于实例
	在输出描述符的变量时，会调用描述符中的__get__方法，在设置描述符变量时，会调用描述符中的__set__方法。 详见程序P47
80. dict1 = dict.fromkeys(seq, value) 为dict1设置键和值，第一个参数为键第二个参数为键值(可选参数，默认为None)
81. 生成器：包含yield的函数是生成器，在yield处返回数据，在下次调用时从上次yield处接着执行  #搭配next()使用
	#此方法节约内存(当range范围很大时)
	def foo(num):
		print("starting...")
		while num<10:
			num=num+1
			yield num
	result = foo(0)
    print(next(result))         #此方法中无法直接用print(result)输出数据
    或
    for i in foo(0):            #打印出foo(0)中生成的所有数
        print(i)
    #也可以通过一个可迭代对象(列表，字符串等)生成一个迭代器对象
    my_string = "Test"
    my_iter = iter(my_string)
    next(my_iter)           #将输出 "T"
82. a = [i for i in range(100) if not(i%2) and i%3]         #列表
	b = {x:x%2 == 0 for x in range(10)}                    #字典
83. 容器->数据的封装
	函数->语句的封装
	类  ->方法和属性的封装
	模块->模块就是程序
84. from hello import * 从hello 引入所有方法。直接就可调用，不用输入hello.
	import hello 仍需输入hello.  但是当导入的文件中存在多个相同名字的函数时，不适用
	import hello as h  导入hello并命名为h， 需要调用hello的函数时，只需h.  即可，也就是用h. 代替hello. 
85. if __name__ = __main__:  
		test()			主要用于子模块中，只在单独运行子模块的情况下运行冒号后面的测试程序，从主程序调用该模块则不调用测试程序
86. 代理  步骤：
	1.参数是一个字典{'类型': '代理IP:端口号'}
	proxy_support = utllib.request.ProxyHandler({})
	2.定制、创建一个opener
	opener = urllib.request.build_opener(proxy_support)
	3a.安装opener
	urllib.request.install_opener(opener)
	3b.调用opener
	opener.open(url)
87. import re
	re.search(r'l.ve', 'I love fishc.com') 搜索l*ve 字符串， \d 匹配数字 \d\d\d 匹配任意三个数字
	re.search(r'[aeiou]', 'I love FishC.com!')   将匹配到o， 因为区分大小写
	re.search(r'[a-z]', 'I love FishC.com!')	将匹配到l(在a-z范围内匹配，有相匹配的就停止)
	re.search(r'ab{3,10}c', 'abbbbbbc') 	b匹配3-10次
	re.search(r'[01]\d\d | 2[0-4]\d | 25[0-5]')	若第一位是0或1则后两位任意；若第一位是2则第二位必须是0-4，第三位任意；若前两位是25，则第三位必须是0-5。 其中 | 表示or的意思
	^在正则表达式中放在字符串最前面，表示取反的意思(除了^后面的，其余全匹配)。放在字符串中间则仅匹配本身^
	* {0,}
	+ {1,}	#至少出现一次 在+后面加一个？即 +? 表示非贪婪模式，寻找最短的匹配项
	? {0,1}		尽量用左边一列，简洁、效率高
    \s          #匹配所有空白，包括空格、换行、tab缩进等所有的空白
    \SHARES     #匹配所有非空白
    []          #表示在它里面包含的单个字符不限顺序的出现
	regex = re.compile('\w*o\w*')  #定义一个匹配规则，
	x = regex.findall(content)   #从content中寻找所有与regex规则匹配的项传入给x(列表)	
	
--------------------------网页异常捕获---------------------------------------
Case1：
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError

req = Request(someurl)
try:
	response = urlioen(req)
except HTTPError as e:
	print('The server couldn\'t fulfill the request')
	print('Error code: ', e.coded)
except URLError as e:
	print('We failed to search a server.')
	print('Reason: ', e.reason)
else:
#everything is fine 

若先捕获URLError, 则无法捕获HTTPError, 因为 H 是U 的子类，在捕获U时会将H 一起捕获

Case2:
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError
req = Request(someurl)
try:
response = urlopen(req)
except URRLError as e:
	if hasattr(e, 'reason'):
		print('We failed to search a server.')
		print('Reason: ', e.reason)
		
	elif hasattr(e, 'code'):
		print('The server couldn\'t fulfill the request.')
		print('Error code: ', e.code)
else:
#everything is fine		
------------------------------------------------------------------
88. Checkbutton		√选框
	Radiobutton		阴影选框
	Frame			框架，其他组件可以放入其中
	Label			单行文本(可以加入\n换行)
	Listbox			列表选框
	Scrollbar		滚动条(与列表选框合用)
	Scale			通过滑块拨选数据
	Menu			菜单组件
	
	
	
89. .bind("Button-1")  Button-1 是左键，Button-2 是中间键， Button-3 是右键
90. photo.set_colorkey(())传入RGB 颜色，将指定颜色透明化，效果较差
91. photo.set_alpha()将整个图片透明化，传入参数在0-255 之间，255为完全不透明
92. 
	position = photo.get_rect()				#将图片矩形传给position；图像背景为透明，其余完全不透明
	for i in reange(position.width):
		for j in range(position.height):	#搜索每个像素
			temp = photo.get_at(i, j)		#photo.get_at(i,j) 返回值为(R, G, B, 0-255)，获得(i,j)位置像素的颜色和透明度，
			if temp[3] !=0:				#如果透明度为0， 将透明度修改为200，像素颜色不变
				temp[3] = 200
			photo.set_at((i, j), temp)		#将修改后的temp设置为(i,j)位置的新属性
			
			
			
93. ord() 以一个字符为参数，返回参数对应的ASCII数值
94. 
95. os.path.splitext(“文件路径”)    分离文件名与扩展名；默认返回(fName,fExtension)元组，可做分片操作,若“”中为路径(非文件)则无扩展名
96. str.replace(old, new[, max])    #old需要被替换的字符，new替换的新字符，max最大替换次数

--------------------------------------BeautfulSoup(网页处理)---------------------------------------------------
soup = BeautifulSoup(html) #html 是以字符串形式呈现的网站内容
print soup.prettify() #soup.prettify()将soup中的内容整理，更便于观看。(格式化输出)
#打印出各个标签中的内容，仅查找第一次出现的内容，找到后即停止
print soup.title #<title>The Dormouse's story</title>
print soup.head #<head><title>The Dormouse's story</title></head>
print soup.a #<a class="sister" href="http://example.com/elsie" id="link1"><!-- Elsie --></a>
print soup.p #<p class="title" name="dromouse"><b>The Dormouse's story</b></p>
#soup 对象本身比较特殊，它的 name 即为 [document]，对于其他内部标签，输出的值便为标签本身的名称。
print soup.name #[document]
print soup.head.name #head
print soup.p.attrs #{'class': ['title'], 'name': 'dromouse'}
print soup.p['class'] #['title']
#获取标签中的内容，若内容为注释(被""包裹着)则无法输出
print soup.p.string #The Dormouse's story

#find_all() 方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件
find_all( name , attrs , recursive , text , **kwargs )
#查找b标签；可传入字符串、正则表达式、列表、true(查找所有tag)、方法(函数)、
soup.find_all('b') # [<b>The Dormouse's story</b>]
#搜索每个tag的”id”属性
soup.find_all(id='link2') # [<a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>]
#ps:使用多个指定名字的参数可以同时过滤tag的多个属性
#可以通过 find_all() 方法的 attrs 参数定义一个字典参数来搜索包含特殊属性的tag
data_soup.find_all
(attrs={"data-foo": "value"})
#通过 text 参数可以搜搜文档中的字符串内容.与 name 参数的可选值一样, text 参数接受 字符串 , 正则表达式 , 列表, True
soup.find_all(text=re.compile("Dormouse")) #[u"The Dormouse's story", u"The Dormouse's story"]
------------------------------------------------------------------------------------------------------------------

#打开一个.xls(Excel)文件
97. workbook = xldr.open_workbook("name.xls")
# 创建一个workbook 设置编码方式
98. workbook = xlwt.Workbook(encoding = "utf-8", style_compression=0)
# 创建一个worksheet
99. worksheet = workbook.add_sheet('My Worksheet')
# 写入excel
# 参数对应 行, 列, 值
100. worksheet.write(1,0, label = 'this is test')
# 保存
workbook.save('Excel_test.xls')
101. q=deque(maxlen=N) 创建一个固定长度的队列，当有新记录加入而队列已满时会自动移除最老的那条记录
	 q.appendleft()  q.appendright()	#比列表操作复杂度低
	 q.popleft()     q.pop()
102. import heapq #需要先导入
	 heapq.nlargest(3, nums) heapq.nsmallest(3, nums) #返回nums中3个最大/最小的数据
	 heapq.nsmallest(3, protfolio, key=lambda s:s["price"]) #从protfolio中搜索price值最小的三个数据(protfolio是字典类型)
	 #若需要寻找的数据数量和集合本身大小相差不多时，应选用：先对集合排序然后进行切片操作sorted(items)[:N];分离出最小的N个数
103. d=defaultdict(list) #自动创建字典表项([]空value)，以待稍后访问
	 d=dict(list)	#若调用不存在的d[key]则报错
104. d=OrderedDict()#创建一个有序得到字典(顺序和各个元素初始被添加的顺序一样) PS:所占存储空间是普通字典的2倍
-----------------------------------------Python进阶--------------------------------------------
105. *args 是用来发送一个非键值对的可变数量的参数列表给一个函数。   #“*”，作为实参时，将列表等一组数据单个传入函数做实参，作形参时，表示可接收多个实参。
106. **kwargs 允许你将不定长度的键值对, 作为参数传递给一个函数。    #键值对数据，如：字典
107. 装饰器 原理解释：
        def a_new_decorator(a_func):
            def wrapTheFunction():
                print("I am doing some boring work before executing a_func()"
                a_func()
                print("I am doing some boring work after executing a_func()"
            return wrapTheFunction
            
        def a_function_requiring_decoration():
            print("I am the function which needs some decoration to remove my foul smell"
        
        a_function_requiring_decoration()
        #outputs: "I am the function which needs some decoration to remove
        a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)
        #now a_function_requiring_decoration is wrapped by wrapTheFunction(
        a_function_requiring_decoration()
        #outputs:I am doing some boring work before executing a_func()
        # I am the function which needs some decoration to remove my foul smell
        # I am doing some boring work after executing a_func()
        
    规范蓝本：
    from functools import wraps
    def decorator_name(f):
        @wraps(f)
        def decorated(*args, **kwargs):
            if not can_run:
                return "Function will not run"
            return f(*args, **kwargs)
            
        return decorated
        
    @decorator_name
    def func():
        return("Function is running")
        
    can_run = True
    print(func())
    # Output: Function is running      
108. dir(list)  #列出list所拥有的所有属性和方法
-------------------------------------Python Cookbook-------------------------------------------
****************************第一章*****************************
109. 解压赋值：任何的序列（或者是可迭代对象）可以通过一个简单的赋值语句解压并
                赋值给多个变量。唯一的前提是变量的数量必须跟序列元素的数量一样。
    >>> data = [ 'ACME', 50, 91.1, (2012, 12, 21) ]
    >>> name, shares, price, date = data
    >>> date            #由于data中第四项是元组类型，所以，date也是元组类型
    (2012, 12, 21)
    >>> name, shares, price, (year, mon, day) = data
    >>> s = 'Hello'
    >>> a, b, c, d, e = s
    >>> _, shares, price, _ = data  #可以使用任意变量名去占位，将不需要的丢掉就可以，只选用我们需要的变量
110.#将首位数去掉，算出其余N个数据的平均值
    def drop_first_last(grades):
        first, *middle, last = grades       #将多个变量存储在一个变量中，如middle，其永远是列表类型
        return avg(middle)
111. 字典中的键映射(对应)多个值
    from collections import defaultdict
    d = defaultdict(list)
    d['a'].append(1)
    d['a'].append(2)
    d['b'].append(4)
    d = defaultdict(set)
    d['a'].add(1)
    d['a'].add(2)
    d['b'].add(4)
    
    
    d = {} # A regular dictionary
    d.setdefault('a', []).append(1) #将d['a'] 定义为一个列表[]， 再将1添加进这个列表
    d.setdefault('a', []).append(2)
    d.setdefault('b', []).append(4)
112. min_price = min(zip(prices.values(), prices.keys()))       #min排序是，以zip第一个参数比较。max、sorted也是如此
        # 输出 (10.75, 'FB')   zip() 函数创建的是一个只能访问一次的迭代器，访问一次后，无法访问第二次(为空)
113.为了寻找两个字典的相同点，可以简单的在两字典的 keys() 或者 items() 方法返回结果上执行集合操作。比如：
    a = {
        'x' : 1,
        'y' : 2,
        'z' : 3
    }
    b = {
        'w' : 10,
        'x' : 11,
        'y' : 2
    }
    # Find keys in common
    a.keys() & b.keys() # { 'x', 'y' }
    # Find keys in a that are not in b
    a.keys() - b.keys() # { 'z' }
    # Find (key,value) pairs in common
    a.items() & b.items() # { ('y', 2) }
114.#命名切片：将切片命名之后，方便后续阅读。
    record = '....................100 .......513.25 ..........'
    SHARES = slice(20, 23)      #定义一个切片操作
    PRICE = slice(31, 37)
    cost = int(record[SHARES]) * float(record[PRICE])       #执行切片操作，record[20:23] = record[SHARES]
    #使用切片的属性获取更多信息： s.start , s.stop , s.step 属性来获取更多的信息
    s = slice(5, 50, 2)     
    s.start         #5
    s.stop          #50
    s.step          #2
    #命名元组：元组中每一个元素都有名字，可以通过名字来访问
    from collections import namedtuple
>>> Subscriber = namedtuple('Subscriber', ['addr', 'joined'])
>>> sub = Subscriber('jonesy@example.com', '2012-10-19')
>>> sub
    Subscriber(addr='jonesy@example.com', joined='2012-10-19')
>>> sub.addr
    'jonesy@example.com'
>>> sub.joined
    '2012-10-19'
    #尽管 namedtuple 的实例看起来像一个普通的类实例，但是它跟元组类型是可交换的，支持所有的普通元组操作，比如索引和解压。
    #命名元组也可以当做字典的替代，且更加高效，但是命名元组是不可更改的。
    #如果真的需要改变值，可以调用命名元组实例的_replace()方法。
    sub._replace(joined = '2021-6-15')
115.#从数据序列中提取所需数据
    mylist = [1, 4, -5, -20, -7, 2, 3, -1]
    print([n for n in mylist if n > 0])          #筛选出大于0的数据
    print([n if n > 0 else 0 for n in mylist])   #筛选出大于0的数据并且小于0的数据用0替换掉
    #使用生成器表达式迭代产生过滤元素
    pos = (n for n in mylist if n > 0)
    for x in pos:
        print(x)
    #过滤规则比较复杂需要处理一些异常或者其他负责情况时，可以将过滤代码放到一个函数中，然后使用内建的filter()函数
    values = ['1', '2', '-3', '-', '4', 'N/A', '5']
    def is_int(val):
        try:
            x = int(val)
            return True
        except ValueError:
            return False
    #filter第一个参数是筛选规则，为true时保留，false丢弃。
    ivals = list(filter(is_int, values))        #filter返回值是一个迭代器，因此如果需要得到一个列表，需要使用list()来转化
    print(ivals)
116.#一个 ChainMap 接受多个字典并将它们在逻辑上变为一个字典。然后，这些字典并
    #不是真的合并在一起了， ChainMap 类只是在内部创建了一个容纳这些字典的列表并重
    #新定义了一些常见的字典操作来遍历这个列表。大部分字典操作都是可以正常使用的，
    #比如：
    from collections import ChainMap
    c = ChainMap(a,b)
    print(c['x'])           # Outputs 1 (from a)
    print(c['y'])           # Outputs 2 (from b)
    print(c['z'])           # Outputs 3 (from a)
    len(c)                  # 输出：3
    list(c.keys())          # 输出: ['x', 'y', 'z']
    list(c.values())        # 输出：[1, 2, 3]
    #对于字典的更新或删除操作总是影响列表中第一个字典。(只对第一个字典进行操作) 
******************第二章：字符串和文本*****************************
117.正则表达式 
    常量：
    re.I        进行忽略大小写匹配
    re.A        顾名思义，ASCII表示ASCII码的意思，让 \w, \W, \b, \B, \d, \D, \s 和 \S 只匹配ASCII，而不是Unicode。
    re.S        DOT表示.，ALL表示所有，连起来就是.匹配所有，包括换行符\n。默认模式下.是不能匹配行符\n的
    re.M        多行模式，当某字符串中有换行符\n，默认模式下是不支持换行符特性的，比如：行开头 和 行结尾，而多行模式下是支持匹配行开头的。
    re模块函数
    1. search：         查找任意位置的匹配项                        #只返回第一个匹配的项
    2. match：          必须从字符串开头匹配                        #
    3. fullmatch：      整个字符串与正则完全匹配                    #
    4. findall:         从字符串任意位置查找，返回一个列表     
    5. finditer:        从字符串任意位置查找，返回一个迭代器
    6. re.split(pattern, string, maxsplit=0, flags=0)               #str.split也可实现分割     
     #用 pattern 分开 string ， maxsplit表示最多进行分割次数， flags表示模式，就是上文中的常量
    7. re.sub(pattern, repl, string, count=0, flags=0)              #
     #repl替换掉string中被pattern匹配的字符， count表示最大替换次数，flags表示正则表达式的常量
118. str.endswith("")       #检查str字符串是否是以""中的字符结尾   返回值bool类型
     str.startswith("")     #检查str字符串是否是以""中的字符开头   返回值bool类型
     #如果你想检查多种匹配可能，只需要将所有的匹配项放入到一个元组中去如：
     str.endswith(('.c', '.py'))    #检查str是否是以.C或.py 结尾
119. >>> datepat = re.compile(r'(\d+)/(\d+)/(\d+)$')        #正则表达式以$结尾表示精确匹配(完全一致)
     >>> datepat.match('11/27/2012abcdef')                  #匹配结果为None，删掉末尾的字母后，才能匹配上
119. strip()删除开始和结尾的字符，默认为删除空格。
     lstrip() 和 rstrip() 分别从左和从右执行删除操作
120. a = "str"
	a.center(20, "-")#将a中字符在20范围内居中显示，其余位置以"-"填充.默认以空格填充
        #输出：-------hello-------
    a.rjust()   右对齐，用法类比.centet     
    a.ljust()   左对齐，用法类比.centet
    format(text, '*>20s') #将text指向的字符串在20范围内右对齐，空白处用*填充。默认以空格填充：'>20'
                         #'<20' 左对齐。'>20'右对齐。 '^20' 居中对齐。  s表示字符串类型？
    #当格式化多个值的时候，这些格式代码也可以被用在 format() 方法中。比如：
    '{:>10s} {:>10s}'.format('Hello', 'Hello')  
    #同时指定宽度和精度的一般形式是 '[<>ˆ]?width[,]?(.digits)?' ，其中 width和 digits 为整数，？代表可选部分。
    #输出：'     Hello     World'   空白处为5个空格(Hello本身就占5格)
121. #在字符串中插入变量
    s = "{name} has {n} message."
    s.format(name='Guido', n=37)
    print(s)        #输出：Guido has 37 message.
122.#以指定列宽格式化长字符串
    s = "Look into my eyes, look into my eyes, the eyes, the eyes, \
    the eyes, not around the eyes, don't look around the eyes, \
    look into my eyes, you're under."
    print(textwrap.fill(s, 40, initial_indent=' '))      #textwrap.fill 将s以每行40个字符的格式输出，
    #initial_indent 开头所需要填充的字符(本例中为空格)。subsequent_indent 除第一行外其他行所需要填充的字符
123. #获取终端尺寸大小
     os.get_terminal_size().columns #返回终端宽度大小
********************************数字日期和时间****************************************
124.#数字的四舍五入
     round(value, ndigits)   #将value值四舍五入保留 ndigits 位小数(ndigits默认为0，保留整数)。若 ndigits 为负数，则表示保留n位整数   
125. float类型存在误差，若需要避免误差，可以使用decimal模块
     from decimal import Decimal
     a = Decimal('4.2')
126. bin() 二进制  oct()八进制    hex()   十六进制转化
     format(x, 'b')  #将x转化为二进制，参数b改为o是八进制，x是十六进制
127. 复数 使用complex(real, imag)定义或带有后缀j的浮点数来指定
     a = complex(2, 4)  a.real, a.imag, a.conjugate,   分别获取a的实部，虚部，共轭复数
     b = 3 - 5j             #也可以用此方法定义一个复数
128. fractions 模块可以被用来执行包含分数的数学运算
     from fractions import Fraction
     a = Fraction(5, 4)     #第一个参数是分子，第二个参数是分母
     b = Fraction(7, 16)
     print(a + b)           #输出27/16
     c = a * b
     print(c)               #输出35/64
     c.numerator            #输出35， 获取分子
     c.denominator          #输出64， 获取分母
129. NumPy库所创建的数组(矩阵)，更适合用来做数学运算
     import numpy as np
     ax = np.array([1, 2, 3, 4]
     ay = np.array([5, 6, 7, 8])
     print(ax * 2)          #输出：[2, 4, 6, 8] 
     print(ax + 10)         #输出：[11, 12, 13, 14]
     print(ax + ay)         #输出：[6, 8, 10, 12]
     print(ax * ay)         #输出：[5, 12, 21, 32]
     #普通列表只能进行列表之间的'+'操作，或者与整数之间的'*'操作
     a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
     a[1]                   #输出：[5, 6, 7, 8]，第一行(下标从0开始)
     a[:, 1]                #输出：[2, 6, 8]，输出第一列(下标从零开始)
     a[1:3, 1:3]            #选择第一行到第二行，第一列到第二列的数据
     #输出：([6, 7]
     #         [10, 11])
     a[1:3, 1:3] += 10      #将第一行到第二行，第一列到第二列的数据分别+10
     #输出：([[ 1, 2, 3, 4],
     #         [ 5, 16, 17, 8],
     #         [ 9, 20, 21, 12]])
130. 矩阵与线性代数运算
     a.T        #输出 a的转置
     a.I        #输出 a的逆
     v = np.matrix([[2],[3],[4]])   #创建一个列向量v  
131. 随机数和随机选择元素
     import random
     values = [1, 2, 3, 4, 5, 6]
     random.choice(values)          #从valuse中随机选择一个
     random.sample(values, n)       #从valuse中抽取n个元素
     random.shuffle(values)         #打乱valuse中元素的顺序
     random.randint(0, 10)          #从0-10中随机产生一个数
     random.random()                #从0-1中随机产生一个浮点数
     random.getrandbits(n)          #生成一个n位的二进制整数
     
132. import numpy as np
    ax = np.array([1, 2, 3, 4])
    ay = np.array([5, 6, 7, 8])
    print(ax + 2)
    print(ax * 2)
    print(ax + ay)
    print(ax * ay)
    
    li = [4, 3, 2, 1]
    print(li * 2)
    print()
133. #基本的日期与时间转换
     from datetime import timedelta
     a = timedelta(days=2, hours=6, minutes=0, seconds=0) 
     b = timedelta(hours=4.5)
     c = a + b
     print(c.days)                  #输出：2,没有hours和minutes属性
     print(c.seconds)               #输出：37800
     print(c.total_seconds()/3600)  #输出：58.5
     a = datetime(2021, 6, 22)      #定义一个日期a，时间是2021-6-22
     #时间之间可以进行加减操作
     datetime.strptime(text, '%Y-%m-%d')    #将text表示的时间字符串解析为时间元组，第二个参数为格式化符号
     z = datetime.datetime(2012, 9, 23, 21, 37, 4, 177393)
     datetime.strftime(z, '%Y-%m-%d')       #将z按格式化输出(按照参数2的格式)。
     自己定义函数实现日期解析，速度比strptime()快的多
     from datetime import datetime
     def parse_ymd(s):
         year_s, mon_s, day_s = s.split('-')
         return datetime(int(year_s), int(mon_s), int(day_s))
***********************************迭代器和生成器**********************************************
134. 反向迭代仅仅当对象的大小可预先确定或者对象实现了reversed ()的特殊方法时才能生效
     a = [1, 2, 3, 4]
     for x in reversed(a):
        print(x)
     如果两者都不符合，那就必须先将对象转换为一个列表才行，如:
     f = open('somefile')
     for line in reversed(list(f)): #当转换的对象很大时，预转换就会消耗很大的内存。
        print(line, end='')
135. 使用itertools.islice()方法对迭代器和生成器进行切片操作
    import itertools
    #创建一个生成器
    def count(n)
        while True:
            yield n
            n += 1
    c = count(0)
    c[10:20]        #会报错
    for x in itertools.islice(c, 10, 20):   #截取c中第10到20个数据(不包括第20个)
        print(x)
    #上面for循环之后，c中数据会停留在第20个位置，再次调用next(c),数据是第20个位置的数据
136. 迭代遍历一个集合(列表？元组？)中元素的所有可能的排列或组合
     items = ['a', 'b', 'c']
     from itertools import permutations
     #permutations它接受一个集合并产生一个元组序列，序列中每个元组由集合中所有元素的一个可能排列组成，无重复数据的排列('a', 'a', 'a')
     for p in permutations(items[,num]):    #num表示指定长度的排序
         print(p)
     #itertools.combinations() 可得到输入集合中元素的所有的组合
      from itertools import combinations
      for c in combinations(items[, num]):  #获得num个数据的所有组合
        print(c)
137. #enumerate() 内置函数，迭代一个序列的同时跟踪正在被处理的元素索引。
     my_list = ['a', 'b', 'c']
     for idx, val in enumerate(my_list[,num]):  #元素索引从num开始，默认从0开始
        print(idx, val)
     #输出：0 a
     #      1 b
     #      2 c
138. #zip(a,b)会生成一个可返回元组(x, y)的迭代器，其中a来自x，b来自y。迭代长度跟a,b中最短序列长度一致。
     a = [1, 2, 3]
     b = ['w', 'x', 'y', 'z']
     for i in zip(a,b):
        print(i)
     #输出：(1, 'w')
     #      (2, 'x')
     #      (3, 'y')
     from itertools import zip_longest
     # itertools.zip longest() 函数迭代长度跟a,b中最长序列长度一致。
     for i in zip_logest(a,b):
        print(i)
     #输出：(1, 'w')
     #      (2, 'x')
     #      (3, 'y')
     #      (None, 'z')
139. 
140. 
141. 
142. 
143. 
144. 
145. 
146. 
     
    

    


	




------------------------------------------------------------------
alt+n		下一条
alt+p		上一条
ctrl+c		强制停止正在运行的IDLE
\n			回车
ctrl+[		退一格回车
help(int)	查找int的使用说明
BIF 就是 Built-in Functions，内置函数。
用Tkinter画哆啦A梦；用Pygame实现小乌龟图片的移动、转向；
pack		按添加顺序排列组件
grid		按行/列形式排列组件
place		允许程序员指定组件的大小和位置
*******************************************************************************
#初始化账户信息(账号、邮箱)
git config --global user.name "YourName"
git config --global user.email "913671574@qq.com"
git add + 文件名/目录名  #将文件添加到本地暂存区
git status          #检查当前目录和暂存区的状态
git commit -m "版本注释信息"     #提交文件
#提交到远程仓库:
git push littleNmae master
		 #仓库小名  分支名

#添加远程仓库:
git remote add littleNmae   link
				#仓库小名  仓库链接
git clone url   #克隆名字叫url的仓库(该库在github的链接).


入门书籍
- 《Python学习手册》
- 《Head First Python》
- 《Learn Python The Hard Way》
- 《Python编程：入门到实践》
- 《笨办法学Python》
- 《简明Python教程》
进阶书籍
- 《Python Cookbook（第三版）》
- 《流畅的Python》
- 《Python源码剖析》
- 《Python进阶》
- 《Flask Web开发:基于Python的Web应用开发实战》

WIN32
NDEBUG
_CONSOLE



